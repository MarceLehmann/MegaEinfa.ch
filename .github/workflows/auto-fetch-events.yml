name: "Auto-Fetch Events from Logic App"

on:
  schedule:
    - cron: "0 8 * * *"  # Daily at 8:00 UTC (10:00 CEST)
  workflow_dispatch:  # Allow manual triggering
  push:
    branches: 
      - main
      - master
    paths:
      - ".github/workflows/auto-fetch-events-v2.yml"

permissions:
  contents: write
  actions: read

jobs:
  fetch-and-update-events:
    runs-on: ubuntu-latest
    
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      - name: "Test connection to Logic App"
        id: test-connection
        run: |
          echo "🔄 Testing connection to Logic App..."
          
          # Test the Logic App endpoint
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            "https://prod-25.switzerlandnorth.logic.azure.com:443/workflows/2d4664dae4a8477583ae88ce5a4cf570/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=oHWCdT2HSCOQ3j1gQOYJPg9e07eFR44xSIGbvyBl2OM" \
            -H "Content-Type: application/json")
          
          echo "HTTP Status: $HTTP_STATUS"
          
          if [ "$HTTP_STATUS" -eq 200 ] || [ "$HTTP_STATUS" -eq 202 ]; then
            echo "✅ Logic App is reachable"
            echo "connection_ok=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Logic App returned status: $HTTP_STATUS"
            echo "connection_ok=false" >> $GITHUB_OUTPUT
          fi

      - name: "Fetch events from Logic App"
        id: fetch-events
        if: steps.test-connection.outputs.connection_ok == 'true'
        run: |
          echo "🔄 Fetching events from Logic App..."
          
          # Make the actual request with verbose output
          RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" -X GET \
            "https://prod-25.switzerlandnorth.logic.azure.com:443/workflows/2d4664dae4a8477583ae88ce5a4cf570/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=oHWCdT2HSCOQ3j1gQOYJPg9e07eFR44xSIGbvyBl2OM" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json")
          
          # Extract HTTP status code
          HTTP_CODE=$(echo "$RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
          JSON_RESPONSE=$(echo "$RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')
          
          echo "� HTTP Status Code: $HTTP_CODE"
          echo "�📥 Raw JSON Response:"
          echo "----------------------------------------"
          echo "$JSON_RESPONSE"
          echo "----------------------------------------"
          
          # Check HTTP status
          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ Logic App returned error code: $HTTP_CODE"
            echo "❌ Response body: $JSON_RESPONSE"
            echo "has_new_events=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if response is valid JSON
          if ! echo "$JSON_RESPONSE" | jq empty > /dev/null 2>&1; then
            echo "❌ Invalid JSON response from Logic App"
            echo "❌ Raw response: $JSON_RESPONSE"
            echo "has_new_events=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "✅ Valid JSON response received"
          
          # Pretty print the JSON
          echo "🎯 Formatted JSON:"
          echo "$JSON_RESPONSE" | jq '.'
          
          # Check for new events
          NEW_EVENTS=$(echo "$JSON_RESPONSE" | jq -r '.New // empty')
          
          echo "🔍 Extracted .New array:"
          echo "$NEW_EVENTS"
          
          if [ "$NEW_EVENTS" = "null" ] || [ "$NEW_EVENTS" = "" ] || [ "$NEW_EVENTS" = "[]" ]; then
            echo "ℹ️ No new events found in .New array"
            echo "has_new_events=false" >> $GITHUB_OUTPUT
          else
            echo "✅ New events found!"
            echo "📋 Number of new events: $(echo "$NEW_EVENTS" | jq '. | length')"
            echo "$NEW_EVENTS" > new_events.json
            echo "has_new_events=true" >> $GITHUB_OUTPUT
          fi

      - name: "Setup Node.js"
        if: steps.fetch-events.outputs.has_new_events == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: "Process and add new events"
        if: steps.fetch-events.outputs.has_new_events == 'true'
        run: |
          echo "🔧 Processing new events..."
          
          # Install required packages
          npm install js-yaml
          
          # Create processing script
          cat > process_events.js << 'EOF'
          const fs = require('fs');
          const yaml = require('js-yaml');
          
          try {
            // Load new events
            const newEvents = JSON.parse(fs.readFileSync('new_events.json', 'utf8'));
            console.log('📋 New events found:', JSON.stringify(newEvents, null, 2));
            
            // Load current upcoming_events.yml
            const eventsFilePath = '_data/upcoming_events.yml';
            let existingEvents = [];
            
            if (fs.existsSync(eventsFilePath)) {
              const eventsContent = fs.readFileSync(eventsFilePath, 'utf8');
              
              // Extract header comments
              const lines = eventsContent.split('\n');
              const headerLines = [];
              let foundFirstEvent = false;
              
              for (const line of lines) {
                if (line.trim().startsWith('- title:') && !foundFirstEvent) {
                  foundFirstEvent = true;
                  break;
                }
                headerLines.push(line);
              }
              
              // Parse existing events
              const yamlPart = eventsContent.substring(headerLines.join('\n').length).trim();
              if (yamlPart) {
                try {
                  existingEvents = yaml.load(yamlPart) || [];
                } catch (e) {
                  console.log('⚠️ Could not parse existing events, creating new list');
                  existingEvents = [];
                }
              }
            }
            
            // Convert new events to proper format
            const convertedEvents = newEvents.map(event => {
              const eventDate = new Date(event.date);
              const formattedDate = eventDate.toISOString().split('T')[0];
              
              let linkedinUrl = event.linkedin;
              if (!linkedinUrl && event.presenter) {
                linkedinUrl = `https://www.linkedin.com/in/${event.presenter.toLowerCase().replace(/\\s+/g, '-')}/`;
              }
              
              return {
                title: event.title.replace(/^"MegaEinfa\\.ch - PowerPlatform erklärt" - /, ''),
                date: formattedDate,
                time: event.time || "10:00 - 11:30",
                presenter: event.presenter,
                linkedin: linkedinUrl,
                description: event.description || `Spannende Session mit ${event.presenter} über PowerPlatform Themen.`,
                registration_link: event.registration_link || "https://example.com/register",
                status: event.status || "Bald verfügbar"
              };
            });
            
            // Check for duplicates
            const newUniqueEvents = convertedEvents.filter(newEvent => {
              return !existingEvents.some(existingEvent => 
                existingEvent.title === newEvent.title && 
                existingEvent.date === newEvent.date
              );
            });
            
            if (newUniqueEvents.length === 0) {
              console.log('ℹ️ All events already exist - no new events added.');
              process.exit(0);
            }
            
            console.log(`✅ ${newUniqueEvents.length} new events will be added`);
            
            // Combine and sort events by date
            const allEvents = [...existingEvents, ...newUniqueEvents]
              .sort((a, b) => new Date(a.date) - new Date(b.date));
            
            // Create header
            const header = `# ========================================
# UPCOMING EVENTS - Zukünftige Termine
# ========================================
# 
# Template für neue Termine (einfach kopieren und anpassen):
#
# - title: "Titel der Veranstaltung"
#   date: "2025-07-15"  # Format: YYYY-MM-DD
#   time: "10:00 - 11:30"
#   presenter: "Name des Präsentators"
#   linkedin: "https://www.linkedin.com/in/presenter-name/"  # LinkedIn-Profil des Präsentators
#   description: "Beschreibung was behandelt wird und was die Teilnehmer lernen..."
#   registration_link: "https://link-zur-anmeldung.com"  # Optional
#   status: "Anmeldung offen"  # Optionen: "Anmeldung offen", "Bald verfügbar", "Planung"
#
# Status-Optionen:
# - "Anmeldung offen" = Grüner Badge + Anmelde-Button
# - "Bald verfügbar"  = Gelber Badge
# - "Planung"         = Oranger Badge
#
# ========================================

`;
            
            // Write updated events file
            const updatedContent = header + yaml.dump(allEvents, {
              lineWidth: -1,
              noArrayIndent: false,
              quotingType: '"'
            });
            
            fs.writeFileSync(eventsFilePath, updatedContent, 'utf8');
            console.log('📝 Events file successfully updated!');
            
            // Create commit message
            const eventTitles = newUniqueEvents.map(e => e.title).join(', ');
            fs.writeFileSync('commit_message.txt', `🎉 Auto-added new events: ${eventTitles}`, 'utf8');
            
          } catch (error) {
            console.error('❌ Error processing events:', error);
            process.exit(1);
          }
          EOF
          
          # Run the processing script
          node process_events.js

      - name: "Commit and push changes"
        if: steps.fetch-events.outputs.has_new_events == 'true'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if there are changes to commit
          if git diff --quiet && git diff --staged --quiet; then
            echo "ℹ️ No changes to commit."
            exit 0
          fi
          
          # Add and commit changes
          git add _data/upcoming_events.yml
          
          if [ -f commit_message.txt ]; then
            COMMIT_MSG=$(cat commit_message.txt)
          else
            COMMIT_MSG="🎉 Auto-update: New events added"
          fi
          
          git commit -m "$COMMIT_MSG"
          git push
          
          echo "✅ Changes successfully pushed!"

      - name: "Summary"
        run: |
          echo "## Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.test-connection.outputs.connection_ok }}" != "true" ]; then
            echo "❌ **Connection Failed** - Could not reach Logic App" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.fetch-events.outputs.has_new_events }}" = "true" ]; then
            echo "🎉 **Success!** New events were automatically added." >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **No Action Required** - No new events found." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow completed at:** $(date)" >> $GITHUB_STEP_SUMMARY
